package edu.school21.chat.repositories;import edu.school21.chat.models.Chatroom;import edu.school21.chat.models.User;import javax.sql.DataSource;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;public class UsersRepositoryJdbcImpl implements UsersRepository {    private final DataSource dataSource;    private final String query = "WITH users as (\n" +            "    SELECT * FROM chat.\"user\"\n" +            "    LIMIT ? OFFSET ?\n" +            "), uc as (\n" +            "    SELECT uc2.id as ucId, uc2.user_id as ucUID, u2.name as uName, uc2.chat_id as ucChatId, c2.name as cName, c2.owner as cOwner, u2.password as ucPassword\n" +            "    FROM chat.user_chatroom as uc2\n" +            "    JOIN chat.\"user\" u2 on u2.id = uc2.user_id\n" +            "    JOIN chat.chatroom c2 on c2.id = uc2.chat_id\n" +            ")\n" +            "SELECT users.id, users.name, users.password, c.id, c.name, uc.ucId, uc.ucUID, uc.uName, uc.ucChatId, uc.cName, uc.cOwner, uc.ucPassword\n" +            "FROM users\n" +            "JOIN chat.chatroom c on users.id = c.owner\n" +            "JOIN uc on uc.ucUID = users.id\n" +            "ORDER BY users.id, c.id, uc.ucId;";    public UsersRepositoryJdbcImpl(DataSource dataSource) {        this.dataSource = dataSource;    }    @Override    public List<User> findAll(int page, int size) {        try (Connection connection = dataSource.getConnection()) {            PreparedStatement statement = connection.prepareStatement(query);            statement.setInt(2, page * size);            statement.setInt(1, size);            statement.executeQuery();            ResultSet resultSet = statement.getResultSet();            List<User> users = new ArrayList<>();            while (resultSet.next()) {                Long uId = resultSet.getLong(1),                        cId = resultSet.getLong(4),                        ucId = resultSet.getLong(6),                        ucOwner = resultSet.getLong(7);                String uName = resultSet.getString(2),                        password = resultSet.getString(3),                        cName = resultSet.getString(5),                        ucOwnerName = resultSet.getString(8),                        ucChatName = resultSet.getString(10), ucOwnerPassword = resultSet.getString(12);                User user;                Chatroom chatroom;                if (users.stream().noneMatch(u -> uId.equals(u.getId()))) {                    user = new User(uId, uName, password, new ArrayList<>(), new ArrayList<>());                    users.add(user);                } else {                    user = users.stream().filter(u -> uId.equals(u.getId())).toList().get(0);                }                if (cId != 0 && user.getCreatedRooms().stream().noneMatch(c -> cId.equals(c.getId()))) {                    chatroom = new Chatroom(cId, cName, new User(user.getId(), user.getName(), user.getPassword(), null, null), null);                    user.getCreatedRooms().add(chatroom);                }                if (ucId != 0 && user.getActiveRooms().stream().noneMatch(c -> ucId.equals(c.getId()))) {                    chatroom = new Chatroom(ucId, ucChatName, new User(ucOwner, ucOwnerName, ucOwnerPassword, null, null), null);                    user.getActiveRooms().add(chatroom);                }            }            return users;        } catch (SQLException e) {            System.out.println(e.getMessage());        }        return null;    }}