package edu.school21.chat.app;import edu.school21.chat.exceptons.NotSavedSubEntityException;import edu.school21.chat.models.Chatroom;import edu.school21.chat.models.Message;import edu.school21.chat.models.User;import edu.school21.chat.repositories.JdbcDataSource;import edu.school21.chat.repositories.MessagesRepository;import edu.school21.chat.repositories.MessagesRepositoryJdbcImpl;import java.io.BufferedReader;import java.io.InputStream;import java.io.InputStreamReader;import java.sql.Connection;import java.sql.Statement;import java.time.LocalDateTime;import java.util.ArrayList;import java.util.Optional;import java.util.Scanner;public class Main {    public static void main(String[] args) {        JdbcDataSource dataSource = new JdbcDataSource();        updateData("/scheme.sql", dataSource);        updateData("/data.sql", dataSource);        MessagesRepository repository = new MessagesRepositoryJdbcImpl(dataSource.getDataSource());        updateMessages(repository);    }    private static void updateMessages(MessagesRepository repository) {        long id = 1L;        User abobus = new User(1L, "aboba", "admin", new ArrayList<>(), new ArrayList<>());        User ana = new User(2L, "ana", "admin", new ArrayList<>(), new ArrayList<>());        User globus = new User(3L, "globus", "admin", new ArrayList<>(), new ArrayList<>());        Chatroom room = new Chatroom(2L, "Chat2", abobus, new ArrayList<>());        Message message;        System.out.println("---UPDATE MESSAGES---");        try {            Optional<Message> optMessage = repository.findById(id);            if (optMessage.isPresent()) {                message = optMessage.get();                System.out.println("MESSAGE BEFORE UPDATE:");                System.out.println(message);                message.setAuthor(abobus);                message.setChatroom(room);                message.setText("hihihi");                message.setLocalDateTime(null);                System.out.println("MESSAGE AFTER UPDATE:");                repository.update(message);                System.out.println(repository.findById(message.getId()));            }        } catch (NotSavedSubEntityException e) {            System.out.println(e.getMessage());        }        try {            id = 2L;            Optional<Message> optMessage = repository.findById(id);            room = new Chatroom(3L, "Chat3", ana, new ArrayList<>());            if (optMessage.isPresent()) {                message = optMessage.get();                System.out.println("MESSAGE BEFORE UPDATE:");                System.out.println(message);                message.setAuthor(ana);                message.setChatroom(room);                message.setText("hahaha)");                message.setLocalDateTime(LocalDateTime.now().minusDays(10));                System.out.println("MESSAGE AFTER UPDATE:");                repository.update(message);                System.out.println(repository.findById(message.getId()));            }        } catch (NotSavedSubEntityException e) {            System.out.println(e.getMessage());        }        try {            id = 4L;            Optional<Message> optMessage = repository.findById(id);            if (optMessage.isPresent()) {                message = optMessage.get();                System.out.println("MESSAGE BEFORE UPDATE:");                System.out.println(message);                message.setAuthor(globus);                message.setChatroom(room);                message.setText("hihi haha");                message.setLocalDateTime(LocalDateTime.now().minusDays(100));                System.out.println("MESSAGE AFTER UPDATE:");                repository.update(message);                System.out.println(repository.findById(message.getId()));            }        } catch (NotSavedSubEntityException e) {            System.out.println(e.getMessage());        }    }    private static void updateData(String file, JdbcDataSource dataSource) {        try (Connection connection = dataSource.getConnection(); InputStream inputStream = Main.class.getResourceAsStream(file)) {            StringBuilder scriptContent = new StringBuilder();            try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {                String line;                while ((line = reader.readLine()) != null) {                    scriptContent.append(line).append("\n");                }            }            try (Statement statement = connection.createStatement()) {                statement.execute(scriptContent.toString());            }        } catch (Exception e) {            e.printStackTrace();        }    }}